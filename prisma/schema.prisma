generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  address  String
  postcode String? @db.VarChar(20)
  isActive Boolean @default(true)
  lat      Float?
  lng      Float?
  menus    Menu[]

  @@map("restaurants")
}

model Menu {
  id            Int         @id @default(autoincrement())
  restaurant_id Int
  title         String      @db.VarChar(255)
  category      String?     @db.VarChar(100)
  price         Decimal     @db.Decimal(10, 2)
  description   String?
  restaurants   Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("menus")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String @id @default(uuid()) @map("_id")
  name          String
  image         String?
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  phone         String?  @unique
  password      String?
  role          UserRole @default(USER)
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts      Account[]
  
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text  
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
  @@map("verification_tokens") 
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
  @@map("password_reset_tokens") 
}

model TwoFactorToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
  @@map("two_factor_tokens") 
}

model TwoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confirmations")
}

// model Ad {
//   id        String   @id @default(cuid())
//   discount  String
//   name      String
//   date      String
//   image     String   
//   isActive  Boolean
//   createdAt DateTime @default(now())
// }

// model Image {
//   id        String   @id @default(cuid())
//   url       String  
//   postId    String  
//   post      Post     @relation(fields: [postId], references: [id])
// }


